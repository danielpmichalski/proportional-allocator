import { ProportionalAllocator } from './proportional-allocator';

describe('add', () => {
    describe('add without value', () => {
        test.each([
            ['undefined + undefined at 0 => [1]', undefined, 0, undefined, [1]],
            ['undefined + 1.0 at 0 => [1]', undefined, 0, 1, [1]],
            ['undefined + 0.5 at 0 => [1]', undefined, 0, 0.5, [1]],
            [
                '[1] + undefined at 0 => [0.5, 0.5]',
                [1],
                0,
                undefined,
                [0.5, 0.5],
            ],
            [
                '[1] + undefined at 1 => [0.5, 0.5]',
                [1],
                1,
                undefined,
                [0.5, 0.5],
            ],
            [
                '[0.3, 0.7] + undefined at 0 => [0.3333333333333333, 0.2, 0.4666666666666667]',
                [0.3, 0.7],
                0,
                undefined,
                [0.3333333333333333, 0.2, 0.4666666666666667],
            ],
            [
                '[0.3, 0.7] + undefined at 1 => [0.2, 0.3333333333333333, 0.4666666666666667]',
                [0.3, 0.7],
                1,
                undefined,
                [0.2, 0.3333333333333333, 0.4666666666666667],
            ],
            [
                '[0.3, 0.7] + undefined at 2 => [0.2, 0.4666666666666667, 0.3333333333333333]',
                [0.3, 0.7],
                2,
                undefined,
                [0.2, 0.4666666666666667, 0.3333333333333333],
            ],
            [
                '[0.3, 0.7] + undefined at 3 => [0.3333333333333333, 0.2, 0.4666666666666667]',
                [0.3, 0.7],
                3, // 1st
                undefined,
                [0.3333333333333333, 0.2, 0.4666666666666667],
            ],
            [
                '[0.3, 0.7] + undefined at 4 => [0.2, 0.3333333333333333, 0.4666666666666667]',
                [0.3, 0.7],
                4, // 2nd
                undefined,
                [0.2, 0.3333333333333333, 0.4666666666666667],
            ],
            [
                '[0.3, 0.7] + undefined at 5 => [0.2, 0.4666666666666667, 0.3333333333333333]',
                [0.3, 0.7],
                5, // last
                undefined,
                [0.2, 0.4666666666666667, 0.3333333333333333],
            ],
            [
                '[0.1, 0.9] + undefined at -1 => [0.06666666666666668, 0.6000000000000001, 0.3333333333333333]',
                [0.1, 0.9],
                -1, // last
                undefined,
                [0.06666666666666668, 0.6000000000000001, 0.3333333333333333],
            ],
            [
                '[0.1, 0.9] + undefined at -2 => [0.06666666666666668, 0.3333333333333333, 0.6000000000000001]',
                [0.1, 0.9],
                -2, // 2nd to last
                undefined,
                [0.06666666666666668, 0.3333333333333333, 0.6000000000000001],
            ],
            [
                '[0.1, 0.9] + undefined at -3 => [0.3333333333333333, 0.06666666666666668, 0.6000000000000001]',
                [0.1, 0.9],
                -3, // last to last
                undefined,
                [0.3333333333333333, 0.06666666666666668, 0.6000000000000001],
            ],
            [
                '[0.1, 0.9] + undefined at -4 => [0.06666666666666668, 0.6000000000000001, 0.3333333333333333]',
                [0.1, 0.9],
                -4, // last
                undefined,
                [0.06666666666666668, 0.6000000000000001, 0.3333333333333333],
            ],
            [
                '[0.1, 0.9] + undefined at -5 => [0.06666666666666668, 0.6000000000000001, 0.3333333333333333]',
                [0.1, 0.9],
                -5, // 2nd to last
                undefined,
                [0.06666666666666668, 0.3333333333333333, 0.6000000000000001],
            ],
            [
                '[0.1, 0.9] + undefined at -6 => [0.06666666666666668, 0.6000000000000001, 0.3333333333333333]',
                [0.1, 0.9],
                -6, // last to last
                undefined,
                [0.3333333333333333, 0.06666666666666668, 0.6000000000000001],
            ],
        ])(
            '%s',
            (
                _: string,
                input: number[] | undefined,
                position: number,
                allocation: number | undefined,
                expected: number[]
            ) => {
                const allocator = new ProportionalAllocator(input);
                allocator.add(position, allocation);
                expect(allocator.getAllocations()).toStrictEqual(expected);
            }
        );
    });

    describe('add with value', () => {
        test.each([
            ['undefined + 0.0 at 0 => [1]', undefined, 0, 0.0, [1]],
            ['undefined + 1.0 at 0 => [1]', undefined, 0, 1.0, [1]],
            ['undefined + 0.5 at 1 => [1]', undefined, 1, 0.5, [1]],
            ['undefined + 0.5 at 100 => [1]', undefined, 100, 0.5, [1]],
            ['undefined + 0.5 at -100 => [1]', undefined, -100, 0.5, [1]],
            ['[1] + 0.0 at -1 => [1, 0]', [1], -1, 0.0, [1, 0]],
            ['[1] + 0.0 at 0 => [0, 1]', [1], 0, 0.0, [0, 1]],
            ['[1] + 0.0 at 1 => [1, 0]', [1], 1, 0.0, [1, 0]],
            ['[1] + 0.0 at 2 => [0, 1]', [1], 2, 0.0, [0, 1]],
            ['[1] + 1.0 at -1 => [0, 1]', [1], -1, 1.0, [0, 1]],
            ['[1] + 1.0 at 0 => [1, 0]', [1], 0, 1.0, [1, 0]],
            ['[1] + 1.0 at 1 => [0, 1]', [1], 1, 1.0, [0, 1]],
            ['[1] + 1.0 at 2 => [1, 0]', [1], 2, 1.0, [1, 0]],
            // todo add more test cases with adding value of 1.0, i.e. when there are lots of values
            ['[1] + 0.75 at -1 => [0.25, 0.75]', [1], -1, 0.75, [0.25, 0.75]],
            ['[1] + 0.75 at 0 => [0.75, 0.25]', [1], 0, 0.75, [0.75, 0.25]],
            ['[1] + 0.75 at 1 => [0.25, 0.75]', [1], 1, 0.75, [0.25, 0.75]],
            ['[1] + 0.75 at 2 => [0.75, 0.25]', [1], 2, 0.75, [0.75, 0.25]],
            [
                '[0.4, 0.6] + 0.85 at -1 => [0.06000000000000001, 0.09000000000000001, 0.85]',
                [0.4, 0.6],
                -1,
                0.85,
                [0.06000000000000001, 0.09000000000000001, 0.85],
            ],
            [
                '[0.4, 0.6] + 0.85 at 0 => [0.85, 0.06000000000000001, 0.09000000000000001]',
                [0.4, 0.6],
                0,
                0.85,
                [0.85, 0.06000000000000001, 0.09000000000000001],
            ],
            [
                '[0.4, 0.6] + 0.85 at 1 => [0.06000000000000001, 0.85, 0.09000000000000001]',
                [0.4, 0.6],
                1,
                0.85,
                [0.06000000000000001, 0.85, 0.09000000000000001],
            ],
            [
                '[0.4, 0.6] + 0.85 at 2 => [0.06000000000000001, 0.09000000000000001, 0.85]',
                [0.4, 0.6],
                2, // last
                0.85,
                [0.06000000000000001, 0.09000000000000001, 0.85],
            ],
            [
                '[0.4, 0.6] + 0.85 at 3 => [0.85, 0.06000000000000001, 0.09000000000000001]',
                [0.4, 0.6],
                3, // at 1st
                0.85,
                [0.85, 0.06000000000000001, 0.09000000000000001],
            ],
            [
                '[0.4, 0.6] + 0.0 at 0 => [0, 0.4, 0.6]',
                [0.4, 0.6],
                0,
                0.0,
                [0, 0.4, 0.6],
            ],
            [
                '[0.4, 0.6] + 0.0 at 1 => [0.4, 0, 0.6]',
                [0.4, 0.6],
                1,
                0.0,
                [0.4, 0, 0.6],
            ],
            [
                '[0.4, 0.6] + 0.0 at 2 => [0.4, 0.6, 0]',
                [0.4, 0.6],
                2,
                0.0,
                [0.4, 0.6, 0],
            ],
        ])(
            '%s',
            (
                _: string,
                input: number[] | undefined,
                position: number,
                allocation: number | undefined,
                expected: number[]
            ) => {
                const allocator = new ProportionalAllocator(input);
                allocator.add(position, allocation);
                expect(allocator.getAllocations()).toStrictEqual(expected);
            }
        );
    });
});
